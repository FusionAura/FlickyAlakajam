using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerScript : MonoBehaviour
{
    private Rigidbody rb;

    public float walkSpeed = 5;
    public float TurnRate = 5;

    [SerializeField]private float moveSpeed = 0;
    [SerializeField] private float acceleration = 7, decceleration = 7;

    [SerializeField] float moveHorizontal = 0, moveVertical = 0, moveHorizontalRaw = 0, moveVerticalRaw = 0, SavedUp = 0, SavedRight = 0;

    Vector3 forward, right, rightMovement, upMovement, heading, surfaceValue = Vector3.zero;

    [Header("Jump Variables")]
    public float JumpForce = 5;

    //Slope Detection
    [SerializeField] float _slopeForce;
    [SerializeField] float _slopeForceRayLength;
    [SerializeField] bool ground;
    [SerializeField] bool _canJump = true;
    public float maxGroundedAngle = 75f;
   
    Vector3 currentGravity; // Just holds some data for us...
    ContactPoint[] cPoints; // ContactPoints are generated by Collision, and they hold lots of fun data.
    Vector3 groundNormal; //The angle that will be perpendicular to the point of contact that our Rigidbody will be grounded on.

    [SerializeField] public List<GameObject> Followers;

    public action PlayerState = action.normal;

    // Start is called before the first frame update
    void Start()
    {
        Followers = new List<GameObject>();
        rb = GetComponent<Rigidbody>();

        forward = Camera.main.transform.forward;
        forward.y = 0;
        forward = Vector3.Normalize(forward);
        right = Quaternion.Euler(new Vector3(0,90,0))*forward;

    }

    private void FixedUpdate()
    {
        Move();
        //Jump
        if (Input.GetButton("Jump") && ground && _canJump == true && PlayerState == action.normal)
        {
            ground = false;
            _canJump = false;
            Jump(JumpForce);

        }
    }

    // Update is called once per frame
    void Update()
    {
        if (ground)
        {
            PlayerState = action.normal;
            _canJump = true;
        }
        ObeyGravity();
    }

    #region Movement
    void Move()
    {
        moveHorizontal = Input.GetAxis("Horizontal");
        moveVertical = Input.GetAxis("Vertical");

        moveHorizontalRaw = Input.GetAxisRaw("Horizontal");
        moveVerticalRaw = Input.GetAxisRaw("Vertical");

        if (moveHorizontalRaw != 0 || moveVerticalRaw != 0)
        {
            rightMovement = right * moveSpeed * Time.fixedDeltaTime * moveHorizontal;
            upMovement = forward * moveSpeed * Time.fixedDeltaTime * moveVertical;

            SavedRight = moveHorizontal;
            SavedUp = moveVertical;

            if (moveSpeed >= walkSpeed)
            {
                moveSpeed = walkSpeed;
            }
            else
            {
                moveSpeed += acceleration * Time.fixedDeltaTime;
            }
            heading = Vector3.Normalize(rightMovement + upMovement);

        }
        else
        {
            rightMovement = right * (moveSpeed * rb.mass) * Time.fixedDeltaTime * SavedRight;
            upMovement = forward * (moveSpeed * rb.mass) * Time.fixedDeltaTime * SavedUp;

            //Decellerate Player speed to 0.
            if (moveSpeed > 0)
            {
                moveSpeed -= decceleration * Time.fixedDeltaTime;
            }
            else
            {
                moveSpeed = 0;
            }
        }
        //Rotate the player in appropriate direction
        if (heading != Vector3.zero)
        {
            //Tuty's solution: https://answers.unity.com/questions/13869/how-do-i-get-smooth-rotation-to-a-point-in-space.html
            Quaternion a = Quaternion.LookRotation(heading, Vector3.up);
            transform.rotation = Quaternion.Slerp(transform.rotation, a, TurnRate * Time.fixedDeltaTime * 2.0f);
        }

        if (PlayerState == action.normal && ground)
        {
            rb.velocity = Vector3.ProjectOnPlane((heading * moveSpeed) + rb.velocity.y * Vector3.up, groundNormal);

            if (rb.velocity.y > 0)
            {
                rb.AddForce(transform.up * -rb.velocity.y, ForceMode.VelocityChange);
            }

            //Need another method to fix this. Applying force downward pushes player down too fast regardless of value.
            //Maybe use cast to detect ground and snap to ground
            else if (rb.velocity.y < 0 && ground == false)
            {
                rb.AddForce(Vector3.up * (rb.velocity.y / 4), ForceMode.VelocityChange);
            }
        }
        else
        {
            rb.velocity = (heading * moveSpeed) + rb.velocity.y * Vector3.up;
        }
    }

    void Jump(float force)
    {
        PlayerState = action.jump;
        Vector3 jumpDir = (transform.up * force);

        rb.AddForce(jumpDir, ForceMode.VelocityChange);
        



    }

    #endregion

    void ObeyGravity()
    {
        if (ground == false)
        {
            //normal gravity, active when not grounded.
            currentGravity = Physics.gravity;
        }
        else if (ground == true)
        {
            /*Not normal gravity. Instead of going down, we go in the
            direction perpendicular to the angle of where we're standing. 
            This means whatever surface we're grounded on will be 
            effectively the same as standing on a perfectly horizontal 
            surface. Ergo, no sliding will occur. */
            currentGravity = -groundNormal * Physics.gravity.magnitude;
            
        }
        rb.AddForce(currentGravity, ForceMode.Force);
    }

    bool CheckGrounded(Collision newCol)
    {
        cPoints = new ContactPoint[newCol.contactCount];
        newCol.GetContacts(cPoints);


        foreach (ContactPoint cP in cPoints)
        {
            /*If the difference in angle between the direction of gravity
                (usually, downward) and the current surface contacted is
                less than our chosen maximum angle, we've found an
                acceptable place to be grounded.*/

            if (maxGroundedAngle > Vector3.Angle(cP.normal, -Physics.gravity.normalized))
            {
                groundNormal = cP.normal;
                               
                return true;
            }
        }
        return false;
    }

    #region Collisions + Triggers
    private void OnCollisionEnter(Collision collision)
    {

    }

    void OnCollisionStay(Collision ourCollision)
    {
        ground = CheckGrounded(ourCollision);
        
    }

    void OnCollisionExit(Collision ourCollision)
    {
        /*It's okay to not have to check whether or not
         the Collision we're exiting is one we're grounded on,
         because it'll be reaffirmed next time OnCollisionStay runs.*/
        ground = false;
        groundNormal = new Vector3(); //Probably not necessary, but a good habit, in my opinion
    }
    private void OnTriggerEnter(Collider other)
    {
        if (other.gameObject.tag == "Chirp")
        {
            FollowPlayer followplayer = other.GetComponent<FollowPlayer>();
            if (followplayer.CollectDelay >= followplayer.CollectDelayMax)
            {
                if (!Followers.Contains(other.gameObject)) Followers.Insert(0, other.gameObject);

                if (Followers.Count == 1)
                {
                    Followers[0].GetComponent<FollowPlayer>().Leader = gameObject;
                }
                else
                {
                    Followers[0].GetComponent<FollowPlayer>().Leader = Followers[1].gameObject;
                }
                other.gameObject.GetComponent<FollowPlayer>().Following = true;
                other.gameObject.GetComponent<RotateItem>().enabled = false;

                other.gameObject.GetComponent<FollowPlayer>().Hurtbox.enabled = true;
                other.gameObject.GetComponent<FollowPlayer>().DetectBox.enabled = false;
            }
        }
    }
    #endregion

    public enum action { normal, jump}
}
